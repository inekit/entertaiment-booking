import { Markup } from 'telegraf';
import { Event } from './models/event.model';
import { TimeSlot } from './models/timeslot.model';

export function getMainMenu() {
  return Markup.keyboard([
    ['üóì –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –∑–∞–ø–∏—Å—å', '‚ùå –ú–æ–∏ –∑–∞–ø–∏—Å–∏ / –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'],
  ]).resize();
}

export function getAdminMenu() {
  return Markup.keyboard([
    ['üóì –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –∑–∞–ø–∏—Å—å', '‚ùå –ú–æ–∏ –∑–∞–ø–∏—Å–∏ / –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'],
    ['üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'],
  ]).resize();
}

export function getEventsInline(events: Event[],isAdminMode?:boolean) {
  return Markup.inlineKeyboard(
    events.map((event) => [
      Markup.button.callback(event.title, `event${isAdminMode?'_admin':''}_${event.id}`),
    ]),
  );
}

export function getEventInfo(event: Event, freePlaces: number, slots: TimeSlot[]) {
  let text = `*${event.title}*\n`;
  if (event.description) text += `${event.description}\n`;
  if (slots.length) {
    text += `\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:`;
  }
  return text;
}

function formatTime(date: Date) {
  return date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit', timeZone: 'Etc/GMT0' });
}

export function getSlotsInlineWithCounts(slots: TimeSlot[], isAdminMode:boolean, slotCounts: Record<number, number>, disabledSlotIds: number[] = [], slotCapacity?: number) {
  const buttons = slots.map((slot) => {
    const used = slotCounts[slot.id] || 0;
    const free = slotCapacity ? slotCapacity - used : undefined;
    const timeStr = `${formatTime(slot.start_time)}‚Äì${formatTime(slot.end_time)}`;
    if (disabledSlotIds.includes(slot.id)) {
      return Markup.button.callback(
        `${timeStr} (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ)`,
        'disabled_slot',
      );
    }
    return Markup.button.callback(
      free !== undefined
        ? `${timeStr} (${slots.length > 5? '—Å–≤.':'—Å–≤–æ–±–æ–¥–Ω–æ'}: ${free})`
        : `${timeStr}`,
      `slot${isAdminMode?'_admin':''}_${slot.id}`,
    );
  });
  const rows = [];
  if (buttons.length > 5) {
    // 2 —Å—Ç–æ–ª–±—Ü–∞
    for (let i = 0; i < buttons.length; i += 2) {
      rows.push([buttons[i], buttons[i + 1]].filter(Boolean));
    }
  } else {
    // –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ
    for (let i = 0; i < buttons.length; i++) {
      rows.push([buttons[i]]);
    }
  }
  // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
  rows.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', isAdminMode? 'admin_bta':'back_to_events')]);
  return Markup.inlineKeyboard(rows);
}

export function getPeopleCountInline(max: number,eventId:number) {
  const buttons = [];
  const limit = Math.min(4, max);
  for (let i = 1; i <= limit; i++) {
    buttons.push(Markup.button.callback(`${i}`, `people_${i}`));
  }
  // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
  buttons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `event_${eventId}`));
  return Markup.inlineKeyboard([buttons]);
}

export function getParticipantsList(participants: { name: string; telegram_id: number; members: string[]; subslot_title?: string }[]) {
  if (!participants.length) return '–ù–µ—Ç –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç.';
  const text = participants
    .map((p, i) => {
      let base = `${i + 1}. `;
      if (p.subslot_title) base += `[${p.subslot_title}] `;
      // –¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ (members), –±–µ–∑ –≤–ª–∞–¥–µ–ª—å—Ü–∞
      base += `–£—á–∞—Å—Ç–Ω–∏–∫–∏: ${p.members.length ? p.members.join(', ') : '‚Äî'}`;
      // id –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ –≤—ã–≤–æ–¥–∏–º
      return base;
    })
    .join('\n');
  return text;
}

// –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏: —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏-—Ü–∏—Ñ—Ä–∞–º–∏
export function getAdminBookingsListWithButtons(bookings: {id: number, members: string[], subslot_title?: string}[]) {
  if (!bookings.length) return {text: '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç.', keyboard: undefined};
  const text = bookings.map((b, i) => {
    let base = `${i + 1}. `;
    if (b.subslot_title) base += `[${b.subslot_title}] `;
    base += `–£—á–∞—Å—Ç–Ω–∏–∫–∏: ${b.members.length ? b.members.join(', ') : '‚Äî'}`;
    return base;
  }).join('\n');
  // –ö–Ω–æ–ø–∫–∏-—Ü–∏—Ñ—Ä—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–µ–Ω—é –∑–∞–ø–∏—Å–∏ –≤ 2 —Ä—è–¥–∞
  const buttons = [];
  for (let i = 0; i < bookings.length; i += 2) {
    const row = [];
    row.push(Markup.button.callback(`${i + 1}`, `admin_booking_${bookings[i].id}`));
    if (bookings[i + 1]) {
      row.push(Markup.button.callback(`${i + 2}`, `admin_booking_${bookings[i + 1].id}`));
    }
    buttons.push(row);
  }
  // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
  buttons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin_bts')]);
  return {text, keyboard: Markup.inlineKeyboard(buttons)};
}

export function getParticipantsInlineBack() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin_bts')],
  ]);
} 
    