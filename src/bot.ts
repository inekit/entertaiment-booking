import { Telegraf, Markup } from 'telegraf';
import { sequelize } from './db';
require('dotenv').config()
import LocalSession = require("telegraf-session-local")
import { getMainMenu, getEventsInline, getEventInfo, getPeopleCountInline, getSlotsInlineWithCounts, getAdminMenu, getParticipantsList, getParticipantsInlineBack } from './bot-menu';
import { Event } from './models/event.model';
import { TimeSlot } from './models/timeslot.model';
import { Booking } from './models/booking.model';
import { User } from './models/user.model';

const bot = new Telegraf(process.env.BOT_TOKEN!);

// –ü–æ–¥–∫–ª—é—á–∞–µ–º session
bot.use((new LocalSession({ database: 'session_db.json' })).middleware());

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è session
declare module 'telegraf/typings/context' {
  interface Context {
    session?: {
      slotId?: number;
      eventId?: number;
      free?: number;
      admin?: boolean;
    };
  }
}

(async () => {
  try {
    await sequelize.authenticate();
    await sequelize.sync();
    console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }

  bot.launch();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
})();





// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
bot.use(async (ctx, next) => {
  if (ctx.from) {
    const [user] = await User.findOrCreate({
      where: { telegram_id: ctx.from.id },
      defaults: { telegram_id: ctx.from.id, name: ctx.from.first_name },
    });
    ctx.state.user = user;
  }
  return next();
});

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–∫–æ–π
bot.start((ctx) => {
  const welcome = `
*–î–æ—Ä–æ–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ —Ç—É—Ä—Å–ª—ë—Ç–∞!* üëã

–ó–¥–µ—Å—å –º–æ–∂–Ω–æ _–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏_, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å *15:30 –¥–æ 18:30*.
–ú–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å —Å–µ–±—è, –∫–æ–ª–ª–µ–≥—É –∏–ª–∏ –ª—é–±–∏–º–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞.

–ù–µ –∑–∞–±—ã–≤–∞–π –æ *–º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞—Ö* –≤ —à–∞—Ç—Ä–µ ‚Äî —Ç—É–¥–∞ –º–æ–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏ —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–µ—â—å:
‚Ä¢ —Å–æ—Ç–≤–æ—Ä–∏—Ç—å –±—Ä–∞—Å–ª–µ—Ç –∏–∑ –±—É—Å–∏–Ω
‚Ä¢ —Ä–∞—Å–ø–∏—Å–∞—Ç—å –∑–Ω–∞—á–æ–∫
‚Ä¢ —Ä–∞—Å–ø–∏—Å–∞—Ç—å —Ñ—Ä–∏—Å–±–∏

_–•–æ—Ä–æ—à–µ–≥–æ —Ç–µ–±–µ –æ—Ç–¥—ã—Ö–∞!_

*–ü–æ–º–Ω–∏:* –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äî —ç—Ç–æ –ª–µ–≥–∫–æ —Å–¥–µ–ª–∞—Ç—å –∑–¥–µ—Å—å –∂–µ.
`;
  if (ctx.from && ctx.from.id === Number(process.env.ADMIN_ID)) {
    return ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!', getAdminMenu());
  }
  return ctx.reply(welcome, { parse_mode: 'Markdown', ...getMainMenu() });
});

bot.hears('üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', async (ctx) => {
  if (!ctx.from || ctx.from.id !== Number(process.env.ADMIN_ID)) return;
  const events = await Event.findAll();
  if (!events.length) return ctx.reply('–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.');
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', getEventsInline(events));
  ctx.session = { admin: true };
});

// –í—ã–±–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–µ
bot.action(/event_(\d+)/, async (ctx, next) => {
  if (ctx.session && ctx.session.admin && ctx.from && ctx.from.id === Number(process.env.ADMIN_ID)) {
    const eventId = Number(ctx.match[1]);
    const event = await Event.findByPk(eventId);
    const slots = await TimeSlot.findAll({ where: { event_id: eventId } });
    if (!slots.length) return ctx.editMessageText('–ù–µ—Ç —Å–ª–æ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.');
    await ctx.editMessageText(`*${event?.title || '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç:`, {
      parse_mode: 'Markdown',
      ...getSlotsInlineWithCounts(slots, {}, [], 0),
    });
    ctx.session.eventId = eventId;
    return;
  }
  return next();
});

// –í—ã–±–æ—Ä —Å–ª–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–µ
bot.action(/slot_(\d+)/, async (ctx, next) => {
  if (ctx.session && ctx.session.admin && ctx.from && ctx.from.id === Number(process.env.ADMIN_ID)) {
    const slotId = Number(ctx.match[1]);
    const slot = await TimeSlot.findByPk(slotId);
    const event = slot ? await Event.findByPk(slot.event_id) : null;
    const bookings = await Booking.findAll({
      where: { timeslot_id: slotId },
      include: [{ model: User, as: 'user' }],
    });
    const participants = bookings.map((b) => ({
      name: b.user?.name || '',
      telegram_id: b.user?.telegram_id || 0,
      friends_count: b.friends_count,
    }));
    const used = bookings.reduce((acc, b) => acc + b.friends_count + 1, 0);
    const free = event ? event.capacity - used : 0;
    const slotInfo = slot && event
      ? `*${event.title}*\n–í—Ä–µ–º—è: ${slot.start_time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}‚Äì${slot.end_time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n–°–≤–æ–±–æ–¥–Ω–æ –º–µ—Å—Ç: ${free}`
      : '';
    await ctx.editMessageText(`${slotInfo}\n\n${getParticipantsList(participants)}`, {
      parse_mode: 'Markdown',
      ...getParticipantsInlineBack(),
    });
    ctx.session.slotId = slotId;
    return;
  }
  return next();
});

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.hears('üóì –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –∑–∞–ø–∏—Å—å', async (ctx) => {
  // –î–ª—è –∞–¥–º–∏–Ω–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const events = await Event.findAll();
  if (!events.length) return ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.');
  // –ï—Å–ª–∏ —ç—Ç–æ callback (editMessageText), –∏–Ω–∞—á–µ reply
  if (ctx.updateType === 'callback_query') {
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', getEventsInline(events));
  } else {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', getEventsInline(events));
  }
});

// –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (inline)
bot.action(/event_(\d+)/, async (ctx) => {
  const eventId = Number(ctx.match[1]);
  const event = await Event.findByPk(eventId);
  if (!event) return ctx.answerCbQuery('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  const slots = await TimeSlot.findAll({ where: { event_id: event.id } });
  const bookings = await Booking.findAll({ where: { event_id: event.id } });
  const used = bookings.reduce((acc, b) => acc + b.friends_count + 1, 0);
  const free = event.capacity - used;
  const slotCounts: Record<number, number> = {};
  for (const slot of slots) {
    slotCounts[slot.id] = bookings
      .filter((b) => b.timeslot_id === slot.id)
      .reduce((acc, b) => acc + b.friends_count + 1, 0);
  }
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
  let disabledSlotIds: number[] = [];
  if (ctx.state.user) {
    const userBookings = await Booking.findAll({
      where: { user_id: ctx.state.user.id },
      include: [{ model: TimeSlot, as: 'timeslot' }],
    });
    disabledSlotIds = slots
      .filter((slot) =>
        userBookings.some((b) => {
          const s = b.timeslot;
          if (!s) return false;
          const newStart = slot.start_time.getTime();
          const newEnd = slot.end_time.getTime();
          const existStart = s.start_time.getTime();
          const existEnd = s.end_time.getTime();
          return newStart < existEnd && newEnd > existStart;
        })
      )
      .map((slot) => slot.id);
  }
  await ctx.editMessageText(getEventInfo(event, free, slots), {
    parse_mode: 'Markdown',
    ...getSlotsInlineWithCounts(slots, slotCounts, disabledSlotIds, event.capacity),
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
bot.action('disabled_slot', async (ctx) => {
  await ctx.answerCbQuery('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∞—è—Å—è –∑–∞–ø–∏—Å—å.');
});

// –í—ã–±–æ—Ä —Å–ª–æ—Ç–∞ (inline)
bot.action(/slot_(\d+)/, async (ctx) => {
  const slotId = Number(ctx.match[1]);
  const slot = await TimeSlot.findByPk(slotId);
  if (!slot) return ctx.answerCbQuery('–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
  const event = await Event.findByPk(slot.event_id);
  if (!event) return ctx.answerCbQuery('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  const bookings = await Booking.findAll({ where: { event_id: event.id, timeslot_id: slot.id } });
  const used = bookings.reduce((acc, b) => acc + b.friends_count + 1, 0);
  const free = event.capacity - used;
  if (free <= 0) return ctx.answerCbQuery('–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç');
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–ª–æ—Ç–µ
  const slotInfo = `*${event.title}*\n${event.description ? event.description + '\n' : ''}–í—Ä–µ–º—è: ${slot.start_time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}‚Äì${slot.end_time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
  await ctx.editMessageText(`${slotInfo}\n\n–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –∑–∞–ø–∏—Å–∞—Ç—å? (—Å–≤–æ–±–æ–¥–Ω–æ: ${free})`, {
    parse_mode: 'Markdown',
    ...getPeopleCountInline(free),
  });
  ctx.session = { slotId, eventId: event.id, free };
});

// –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ–ª–æ–≤–µ–∫ (inline)
bot.action(/people_(\d+)/, async (ctx) => {
  const count = Number(ctx.match[1]);
  const session = ctx.session || {};
  if (!session.slotId || !session.eventId || !session.free) {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –∑–∞–Ω–æ–≤–æ.');
  }
  if (count < 1 || count > Math.min(4, session.free)) {
    return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫.');
  }
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
  const slot = await TimeSlot.findByPk(session.slotId);
  if (!slot) return ctx.reply('–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  const userBookings = await Booking.findAll({
    where: { user_id: ctx.state.user.id },
    include: [{ model: TimeSlot, as: 'timeslot' }],
  });
  const overlap = userBookings.some((b) => {
    const s = b.timeslot;
    if (!s) return false;
    const newStart = slot.start_time.getTime();
    const newEnd = slot.end_time.getTime();
    const existStart = s.start_time.getTime();
    const existEnd = s.end_time.getTime();
    return (
      (newStart < existEnd && newEnd > existStart)
    );
  });
  if (overlap) {
    return ctx.reply('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç, –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–π—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏!');
  }
  const exists = await Booking.findOne({
    where: {
      user_id: ctx.state.user.id,
      event_id: session.eventId,
      timeslot_id: session.slotId,
    },
  });
  if (exists) {
    return ctx.reply('–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç!');
  }
  await Booking.create({
    user_id: ctx.state.user.id,
    event_id: session.eventId,
    timeslot_id: session.slotId,
    friends_count: count - 1,
  });
  await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!');
});

// –ú–æ–∏ –∑–∞–ø–∏—Å–∏ / –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
bot.hears('‚ùå –ú–æ–∏ –∑–∞–ø–∏—Å–∏ / –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', async (ctx) => {
  const bookings = await Booking.findAll({
    where: { user_id: ctx.state.user.id },
    include: [
      { model: Event, as: 'event' },
      { model: TimeSlot, as: 'timeslot' },
    ],
  });
  if (!bookings.length) return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.');
  for (const booking of bookings) {
    const event = booking.event;
    const slot = booking.timeslot;
    let text = `*${event.title}*\n`;
    text += `–í—Ä–µ–º—è: ${slot.start_time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}‚Äì${slot.end_time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n`;
    text += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: ${booking.friends_count + 1}`;
    await ctx.reply(text, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', `cancel_${booking.id}`)],
      ]),
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
bot.action(/cancel_(\d+)/, async (ctx) => {
  const bookingId = Number(ctx.match[1]);
  const booking = await Booking.findByPk(bookingId);
  if (!booking || booking.user_id !== ctx.state.user.id) {
    return ctx.answerCbQuery('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º');
  }
  await booking.destroy();
  await ctx.editMessageText('–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.');
});

// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
bot.action('back_to_events', async (ctx) => {
  const events = await Event.findAll();
  await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', getEventsInline(events));
});

// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Å–ª–æ—Ç–æ–≤ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
bot.action('admin_back_to_slots', async (ctx) => {
  const session = ctx.session || {};
  if (!session.eventId) return ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ');
  const event = await Event.findByPk(session.eventId);
  const slots = await TimeSlot.findAll({ where: { event_id: session.eventId } });
  await ctx.editMessageText(`*${event?.title || '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç:`, {
    parse_mode: 'Markdown',
    ...getSlotsInlineWithCounts(slots, {}, [], 0),
  });
});


